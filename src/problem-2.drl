package com.lunatech.euler.problem2

/*
	Problem 2
	19 October 2001
	
	Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
	
	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	
	By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

import com.lunatech.euler.model.*;
import function com.lunatech.euler.RuleFunctions.log;

declare Term
	index : long
	value : long
end

rule "First two terms"
when
	not Term(value == 1)
	not Term(value == 2)
then
	insert(new Term(1, 1));
	insert(new Term(2, 2));
	#log(drools, "term %d: %d", 1, 1);
end

rule "Next term"
when
	Term($i : index, $a : value)
	Term(index == ($i + 1), $b : value != $a)
	not Term(value == ($a + $b))
	eval($a + $b <= 4000000)
then
	long value = $a + $b;
	long index = $i + 2;
	insert(new Term(index, value));
	#log(drools, "next term %d: %d", index, value);
end

rule "Problem 2 solution"
when
	Term($i : index, $a : value)
	Term(index == ($i + 1), $b : value != $a)
	eval($a + $b > 4000000)
	$evenTerms : Number()
		from accumulate(
			Term($v : value <= 4000000, eval(value % 2 == 0) ),
			sum($v) 
		)
	then
		insert(new Solution(2, $evenTerms.longValue()));
		log(drools, "%1.0f", $evenTerms);
end